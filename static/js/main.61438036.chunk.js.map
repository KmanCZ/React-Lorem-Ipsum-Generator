{"version":3,"sources":["App.tsx","index.tsx"],"names":["Generator","useState","lorem","setLorem","className","Form","Display","props","count","setCount","units","setUnits","handleRadioChange","e","target","value","onSubmit","preventDefault","generatedLorem","loremIpsum","format","type","name","onChange","isNaN","parseInt","id","checked","htmlFor","parse","App","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"wNAaA,SAASA,IAAa,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,KAGnB,OACE,sBAAKC,UAAU,YAAf,UACE,cAACC,EAAD,CAAMF,SAAUA,IAChB,cAACG,EAAD,CAASJ,MAAOA,OAUtB,SAASG,EAAKE,GAAuB,IAAD,EACRN,mBAAS,GADD,mBAC3BO,EAD2B,KACpBC,EADoB,OAERR,mBAAS,cAFD,mBAE3BS,EAF2B,KAEpBC,EAFoB,KAY5BC,EAAoB,SAACC,GACzBF,EAASE,EAAEC,OAAOC,QAYpB,OACE,uBAAMC,SATa,SAACH,GAEpB,GADAA,EAAEI,iBACY,eAAVP,GAAoC,cAAVA,GAAmC,UAAVA,EAAmB,CACxE,IAAMQ,EAAiBC,qBAAW,CAAEC,OAAQ,OAAQV,QAAOF,UAC3DD,EAAMJ,SAASe,KAKjB,UACE,yBAASd,UAAU,eAAnB,SACE,uBACEiB,KAAK,SACLC,KAAK,QACLP,MAAOP,EACPe,SA3BmB,SAACV,IACzBW,MAAMC,SAASZ,EAAEC,OAAOC,SACvBU,SAASZ,EAAEC,OAAOC,OAAS,GAC3BN,EAASgB,SAASZ,EAAEC,OAAOC,aA2B3B,0BAASX,UAAU,cAAnB,UACE,gCACE,uBACEiB,KAAK,QACLC,KAAK,QACLP,MAAM,aACNW,GAAG,aACHC,QAAmB,eAAVjB,EACTa,SAAUX,IAEZ,uBAAOgB,QAAQ,aAAf,2BAEF,gCACE,uBACEP,KAAK,QACLC,KAAK,QACLP,MAAM,YACNW,GAAG,YACHC,QAAmB,cAAVjB,EACTa,SAAUX,IAEZ,uBAAOgB,QAAQ,YAAf,0BAEF,gCACE,uBACEP,KAAK,QACLC,KAAK,QACLP,MAAM,QACNW,GAAG,QACHC,QAAmB,UAAVjB,EACTa,SAAUX,IAEZ,uBAAOgB,QAAQ,QAAf,yBAGJ,wBAAQP,KAAK,SAAb,yBAWN,SAASf,EAAQC,GACf,OACE,yBAASH,UAAWG,EAAML,OAAS,UAAnC,SAA+C2B,YAAMtB,EAAML,SAIhD4B,MAhHf,WACE,OACE,iCACE,uDACA,cAAC9B,EAAD,Q,iBCFN+B,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAcC,KAAK,6DAErBC,SAASC,eAAe,W","file":"static/js/main.61438036.chunk.js","sourcesContent":["import React, { ChangeEvent, Dispatch, FormEvent, useState } from \"react\";\nimport { loremIpsum } from \"lorem-ipsum\";\nimport parse from \"html-react-parser\";\n\nfunction App() {\n  return (\n    <main>\n      <h1>Lorem Ipsum Generator</h1>\n      <Generator />\n    </main>\n  );\n}\n\nfunction Generator() {\n  const [lorem, setLorem] = useState(\"\");\n\n  return (\n    <div className=\"generator\">\n      <Form setLorem={setLorem} />\n      <Display lorem={lorem} />\n    </div>\n  );\n}\n\n//Props for form component\ninterface FormInterface {\n  setLorem: Dispatch<React.SetStateAction<string>>;\n}\n\nfunction Form(props: FormInterface) {\n  const [count, setCount] = useState(5);\n  const [units, setUnits] = useState(\"paragraphs\");\n\n  //saves count if value if number and bigger than zero\n  const handleNumberChange = (e: ChangeEvent<HTMLInputElement>) => {\n    !isNaN(parseInt(e.target.value)) &&\n      parseInt(e.target.value) > 0 &&\n      setCount(parseInt(e.target.value));\n  };\n\n  //saves units from radio button\n  const handleRadioChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setUnits(e.target.value);\n  };\n\n  //generates lorem based on input from form\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    if (units === \"paragraphs\" || units === \"sentences\" || units === \"words\") {\n      const generatedLorem = loremIpsum({ format: \"html\", units, count });\n      props.setLorem(generatedLorem);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <section className=\"number-input\">\n        <input\n          type=\"number\"\n          name=\"count\"\n          value={count}\n          onChange={handleNumberChange}\n        />\n      </section>\n      <section className=\"radio-input\">\n        <div>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            value=\"paragraphs\"\n            id=\"paragraphs\"\n            checked={units === \"paragraphs\"}\n            onChange={handleRadioChange}\n          />\n          <label htmlFor=\"paragraphs\">paragraphs</label>\n        </div>\n        <div>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            value=\"sentences\"\n            id=\"sentences\"\n            checked={units === \"sentences\"}\n            onChange={handleRadioChange}\n          />\n          <label htmlFor=\"sentences\">sentences</label>\n        </div>\n        <div>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            value=\"words\"\n            id=\"words\"\n            checked={units === \"words\"}\n            onChange={handleRadioChange}\n          />\n          <label htmlFor=\"words\">words</label>\n        </div>\n      </section>\n      <button type=\"submit\">Generate</button>\n    </form>\n  );\n}\n\n//props for display\ninterface DisplayInterface {\n  lorem: string;\n}\n\n//takes generated lorem and parses it to a html\nfunction Display(props: DisplayInterface) {\n  return (\n    <section className={props.lorem && \"display\"}>{parse(props.lorem)}</section>\n  );\n}\n\nexport default App;\n\n//loremIpsum({ format: \"html\", units: \"paragraphs\", count: 3 });\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport GithubCorner from \"react-github-corner\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GithubCorner href=\"https://github.com/KmanCZ/React-Lorem-Ipsum-Generator\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}